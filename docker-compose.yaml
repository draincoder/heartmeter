services:
  diary:
    profiles: ["heartmeter"]
    container_name: heartmeter.diary
    hostname: heartmeter.diary
    build:
      context: ./diary/
    restart: unless-stopped
    expose:
      - "8080"
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
      rabbit:
        condition: service_healthy
    networks:
      - heartmeter.postgres.network
      - heartmeter.diary.network
      - heartmeter.rabbit.network
    env_file:
      - ./diary/.env.docker
    volumes:
      - ./logs:/app/logs:rw

  reporter:
    profiles: ["heartmeter"]
    container_name: heartmeter.reporter
    hostname: heartmeter.reporter
    build:
      context: ./reporter/
    restart: unless-stopped
    expose:
      - "8081"
    ports:
      - "8081:8081"
    depends_on:
      rabbit:
        condition: service_healthy
      weather:
        condition: service_started
    networks:
      - heartmeter.rabbit.network
      - heartmeter.weather.network
    env_file:
      - ./reporter/.env.docker
    volumes:
      - ./logs:/app/logs:rw
      - ./reports:/app/reports:rw

  weather:
    profiles: [ "heartmeter" ]
    container_name: heartmeter.weather
    hostname: heartmeter.weather
    build:
      context: ./weather/
    restart: unless-stopped
    expose:
      - "8082"
    ports:
      - "8082:8082"
    networks:
      - heartmeter.weather.network
    env_file:
      - ./weather/.env.docker
    volumes:
      - ./logs:/app/logs:rw

  migration:
    profiles: ["heartmeter", "migration"]
    container_name: heartmeter.migration
    build:
      context: ./diary/
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - heartmeter.postgres.network
    env_file:
      - ./diary/.env.docker
    volumes:
      - ./diary/alembic.ini:/app/alembic.ini:ro
    command: ["python", "-m", "alembic", "upgrade", "head"]

  postgres:
    profiles: ["heartmeter", "migration"]
    container_name: heartmeter.postgres
    image: "postgres:15-alpine"
    hostname: heartmeter.postgres
    restart: unless-stopped
    expose:
      - "5432"
    ports:
      - "127.0.0.1:15432:5432"
    networks:
      - heartmeter.postgres.network
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
      POSTGRES_SHARED_BUFFERS: 1GB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 3GB
      POSTGRES_WORK_MEM: 400MB
      POSTGRES_MAINTENANCE_WORK_MEM: 1GB
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
      POSTGRES_MAX_WAL_SIZE: 2GB
      POSTGRES_WAL_BUFFERS: 8MB
      POSTGRES_RANDOM_PAGE_COST: 1.1
      POSTGRES_EFFECTIVE_IO_CONCURRENCY: 4
    volumes:
      - heartmeter.postgres.data:/var/lib/postgresql/data:rw
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

  rabbit:
    profiles: ["heartmeter"]
    image: rabbitmq:3.11-management-alpine
    container_name: heartmeter.rabbit
    hostname: heartmeter.rabbit
    restart: unless-stopped
    expose:
      - "5672"
      - "15672"
    ports:
      - "127.0.0.1:5671:5671"
      - "127.0.0.1:5672:5672"
      - "127.0.0.1:15672:15672"
    networks:
      - heartmeter.rabbit.network
    volumes:
      - heartmeter.rabbit.data:/var/lib/rabbitmq/:rw
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-admin}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-admin}
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmq-diagnostics check_running -q" ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

volumes:
  heartmeter.postgres.data: {}
  heartmeter.rabbit.data: {}

networks:
  heartmeter.diary.network: {}
  heartmeter.weather.network: {}
  heartmeter.postgres.network: {}
  heartmeter.rabbit.network: {}
